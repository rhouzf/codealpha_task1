---
- name: Create EC2 instance
  hosts: localhost
  connection: local
  gather_facts: true
  tasks:
    - name: create security group
      amazon.aws.ec2_group:
        name: my_security_group
        description: Security Group for EC2 instance
        rules:
          - proto: tcp
            ports:
              - 22
              - 80
              - 8080
            cidr_ip: 0.0.0.0/0
        region: eu-west-3

    - name: launching ec2
      amazon.aws.ec2_instance:
        name: "myEC5instance"
        instance_type: t2.medium
        key_name: f
        image_id: ami-00ac45f3035ff009e
        region: eu-west-3
        security_group: my_security_group
        count: 1
        vpc_subnet_id: subnet-0fa822e1145be418e
        wait: yes
        volumes:
          - device_name: /dev/sdb
            ebs:
              volume_size: 8
              delete_on_termination: true
        tags:
          Name: myec2instance
        network:
          public_ip: yes
        instance_initiated_shutdown_behavior: stop
        termination_protection: no
      register: ec2
    
    - name: Save EC2 instance information to JSON file
      ansible.builtin.copy:
        content: "{{ ec2.instances[0].network_interfaces[0].association.public_ip }}"
        dest: data.json


    - name: Ajouter L'instances à l'inventaire
      ansible.builtin.add_host:
        hostname: "{{ ec2.instances[0].network_interfaces[0].association.public_ip }}"
        groupname: ec2hosts
        ansible_ssh_private_key_file: ~/.ssh/f.pem
        ansible_user: ubuntu

    - name: Attendre que SSH soit prêt
      ansible.builtin.wait_for:
        host: "{{ ec2.instances[0].network_interfaces[0].association.public_ip }}"
        port: 22
        delay: 10
        timeout: 320
        state: started

- name: Installer docker et microk8s sur une instance distante
  hosts: ec2hosts
  become: true
  gather_facts: false
  vars:
    ansible_ssh_private_key_file: ~/.ssh/f.pem
    ansible_user: ubuntu
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
    num_pods: 3
    num_containers: 1
    container_image: nginx:latest
    request_memory: 64Mi
    request_cpu: 250m
  tasks:
    - name: Mise à jour de la liste des paquets
      apt:
        name: "*"
        state: latest

    - name: Include docker&microk8s installation tasks
      include_tasks: kubernetes_install.yml

    - name: Attendre que MicroK8s soit prêt
      command: microk8s.status --wait-ready
      become: yes

    - name: Vérifier l'état de MicroK8s
      command: microk8s.inspect
      register: microk8s_inspect
      become: yes

    - name: Créer le fichier YAML pour les pods et conteneurs
      copy:
        dest: /home/ubuntu/pods.yaml
        content: |
          {% for pod_index in range(1, num_pods + 1) %}
          apiVersion: v1
          kind: Pod
          metadata:
            name: pod-example-{{ pod_index }}
          spec:
            containers:
          {% for container_index in range(1, num_containers + 1) %}
            - name: container-example-{{ pod_index }}-{{ container_index }}
              image: {{ container_image }}
              resources:
              requests:
                memory: "{{ request_memory }}"
                cpu: "{{ request_cpu }}"
              limits:
                memory: "128Mi"
                cpu: "500m"
              command: [ "sleep", "infinity" ] # Keeps the ubuntu container running    
          {% endfor %}
          ---
          {% endfor %}
              
    - name: Appliquer le fichier YAML pour créer les pods et conteneurs
      command: microk8s.kubectl apply --validate=false --request-timeout=60s -f /home/ubuntu/pods.yaml
      become: yes
      register: kubectl_apply_result
      retries: 3
      delay: 60
      until: kubectl_apply_result.rc == 0

    - name: Attendre que les pods soient en statut Running
      command: >
        bash -c 'while [[ $(microk8s.kubectl get pods -o jsonpath="{.items[*].status.phase}" | grep -v "Running") ]]; do echo "Waiting for pods to be in Running state"; sleep 10; done'
      become: yes

    - name: Vérifier l'état des pods
      command: microk8s.kubectl get pods
      register: pod_status
      become: yes

    - debug:
        var: pod_status.stdout_lines
    
    - name: Installer ttyd
      ansible.builtin.apt:
        name: ttyd
        state: present
      become: yes
    - name: Lancer ttyd pour exposer le terminal sur le port 8080
      shell: ttyd --writable -p 8080 tmux &
      async: 10
      poll: 0
      become: yes

